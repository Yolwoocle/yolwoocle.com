pico-8 cartridge // http://www.pico-8.com
version 41
__lua__
left,right,up,down,btno,btnx = 0,1,2,3,4,5
black,dark_blue,dark_purple,dark_green,brown,dark_gray,light_gray,white,red,orange,yellow,green,blue,indigo,pink,peach=0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15

function v(x,y,z)
    return {x=x, y=y, z=z}
end

obj_teapot = {
    faces_sorted = {},
    verts = {
        v(1.065000, 2.400000, 1.065000),
        v(0.996219, 2.498437, 0.996219),
        v(0.000000, 2.498437, 1.403125),
        v(0.000000, 2.400000, 1.500000),
        v(0.994000, 2.400000, 0.994000),
        v(0.000000, 2.400000, 1.400000),
        v(1.500000, 2.400000, 0.000000),
        v(1.403125, 2.498437, 0.000000),
        v(1.400000, 2.400000, 0.000000),
        v(-1.065000, 2.400000, 1.065000),
        v(-0.996219, 2.498437, 0.996219),
        v(-1.403125, 2.498437, 0.000000),
        v(-1.500000, 2.400000, 0.000000),
        v(-0.994000, 2.400000, 0.994000),
        v(-1.400000, 2.400000, 0.000000),
        v(-1.065000, 2.400000, -1.065000),
        v(-0.996219, 2.498437, -0.996219),
        v(0.000000, 2.498437, -1.403125),
        v(0.000000, 2.400000, -1.500000),
        v(-0.994000, 2.400000, -0.994000),
        v(0.000000, 2.400000, -1.400000),
        v(1.065000, 2.400000, -1.065000),
        v(0.996219, 2.498437, -0.996219),
        v(0.994000, 2.400000, -0.994000),
        v(1.420000, 0.900000, 1.420000),
        v(1.309063, 1.621875, 1.309063),
        v(0.000000, 1.621875, 1.843750),
        v(0.000000, 0.900000, 2.000000),
        v(2.000000, 0.900000, 0.000000),
        v(1.843750, 1.621875, 0.000000),
        v(-1.420000, 0.900000, 1.420000),
        v(-1.309063, 1.621875, 1.309063),
        v(-1.843750, 1.621875, 0.000000),
        v(-2.000000, 0.900000, 0.000000),
        v(-1.420000, 0.900000, -1.420000),
        v(-1.309063, 1.621875, -1.309063),
        v(0.000000, 1.621875, -1.843750),
        v(0.000000, 0.900000, -2.000000),
        v(1.420000, 0.900000, -1.420000),
        v(1.309063, 1.621875, -1.309063),
        v(1.065000, 0.150000, 1.065000),
        v(1.242500, 0.384375, 1.242500),
        v(0.000000, 0.384375, 1.750000),
        v(0.000000, 0.150000, 1.500000),
        v(1.500000, 0.150000, 0.000000),
        v(1.750000, 0.384375, 0.000000),
        v(-1.065000, 0.150000, 1.065000),
        v(-1.242500, 0.384375, 1.242500),
        v(-1.750000, 0.384375, 0.000000),
        v(-1.500000, 0.150000, 0.000000),
        v(-1.065000, 0.150000, -1.065000),
        v(-1.242500, 0.384375, -1.242500),
        v(0.000000, 0.384375, -1.750000),
        v(0.000000, 0.150000, -1.500000),
        v(1.065000, 0.150000, -1.065000),
        v(1.242500, 0.384375, -1.242500),
        v(-2.850000, 1.800000, 0.225000),
        v(-2.518750, 2.095313, 0.225000),
        v(-2.625000, 2.193750, 0.000000),
        v(-3.000000, 1.800000, 0.000000),
        v(-1.550000, 2.137500, 0.225000),
        v(-1.500000, 2.250000, 0.000000),
        v(-2.700000, 1.800000, 0.000000),
        v(-2.412500, 1.996875, 0.000000),
        v(-1.600000, 2.025000, 0.000000),
        v(-2.850000, 1.800000, -0.225000),
        v(-2.518750, 2.095313, -0.225000),
        v(-1.550000, 2.137500, -0.225000),
        v(-1.950000, 0.750000, 0.225000),
        v(-2.634375, 1.253906, 0.225000),
        v(-2.731250, 1.157813, 0.000000),
        v(-1.900000, 0.600000, 0.000000),
        v(-2.537500, 1.350000, 0.000000),
        v(-1.950000, 0.750000, -0.225000),
        v(-2.634375, 1.253906, -0.225000),
        v(3.000000, 2.400000, 0.187500),
        v(2.537500, 1.621875, 0.341250),
        v(2.687500, 1.443750, 0.000000),
        v(3.300000, 2.400000, 0.000000),
        v(1.700000, 1.012500, 0.495000),
        v(1.700000, 0.600000, 0.000000),
        v(2.700000, 2.400000, 0.000000),
        v(2.387500, 1.800000, 0.000000),
        v(1.700000, 1.425000, 0.000000),
        v(3.000000, 2.400000, -0.187500),
        v(2.537500, 1.621875, -0.341250),
        v(1.700000, 1.012500, -0.495000),
        v(3.000000, 2.400000, 0.112500),
        v(3.126563, 2.466797, 0.150000),
        v(3.428125, 2.477344, 0.000000),
        v(3.200000, 2.400000, 0.000000),
        v(2.800000, 2.400000, 0.000000),
        v(2.825000, 2.456250, 0.000000),
        v(3.000000, 2.400000, -0.112500),
        v(3.126562, 2.466797, -0.150000),
        v(0.142000, 2.700000, 0.142000),
        v(0.231031, 2.981250, 0.231031),
        v(0.000000, 2.981250, 0.325000),
        v(0.000000, 2.700000, 0.200000),
        v(0.000000, 3.150000, 0.000000),
        v(0.200000, 2.700000, 0.000000),
        v(0.325000, 2.981250, 0.000000),
        v(-0.142000, 2.700000, 0.142000),
        v(-0.231031, 2.981250, 0.231031),
        v(-0.325000, 2.981250, 0.000000),
        v(-0.200000, 2.700000, 0.000000),
        v(-0.142000, 2.700000, -0.142000),
        v(-0.231031, 2.981250, -0.231031),
        v(0.000000, 2.981250, -0.325000),
        v(0.000000, 2.700000, -0.200000),
        v(0.142000, 2.700000, -0.142000),
        v(0.231031, 2.981250, -0.231031),
        v(0.923000, 2.400000, 0.923000),
        v(0.585750, 2.550000, 0.585750),
        v(0.000000, 2.550000, 0.825000),
        v(0.000000, 2.400000, 1.300000),
        v(1.300000, 2.400000, 0.000000),
        v(0.825000, 2.550000, 0.000000),
        v(-0.923000, 2.400000, 0.923000),
        v(-0.585750, 2.550000, 0.585750),
        v(-0.825000, 2.550000, 0.000000),
        v(-1.300000, 2.400000, 0.000000),
        v(-0.923000, 2.400000, -0.923000),
        v(-0.585750, 2.550000, -0.585750),
        v(0.000000, 2.550000, -0.825000),
        v(0.000000, 2.400000, -1.300000),
        v(0.923000, 2.400000, -0.923000),
        v(0.585750, 2.550000, -0.585750),
        v(0.911906, 0.046875, -0.911906),
        v(0.000000, 0.046875, -1.284375),
        v(0.000000, 0.000000, 0.000000),
        v(1.284375, 0.046875, 0.000000),
        v(-0.911906, 0.046875, -0.911906),
        v(-1.284375, 0.046875, 0.000000),
        v(-0.911906, 0.046875, 0.911906),
        v(0.000000, 0.046875, 1.284375),
        v(0.911906, 0.046875, 0.911906),
    },
    faces = {
        {2, 4, 1},
        {5, 3, 2},
        {7, 2, 1},
        {8, 5, 2},
        {11, 13, 10},
        {14, 12, 11},
        {4, 11, 10},
        {3, 14, 11},
        {17, 19, 16},
        {20, 18, 17},
        {13, 17, 16},
        {12, 20, 17},
        {23, 7, 22},
        {24, 8, 23},
        {19, 23, 22},
        {18, 24, 23},
        {26, 28, 25},
        {1, 27, 26},
        {29, 26, 25},
        {30, 1, 26},
        {32, 34, 31},
        {10, 33, 32},
        {28, 32, 31},
        {27, 10, 32},
        {36, 38, 35},
        {16, 37, 36},
        {34, 36, 35},
        {33, 16, 36},
        {40, 29, 39},
        {22, 30, 40},
        {38, 40, 39},
        {37, 22, 40},
        {41, 43, 44},
        {42, 28, 43},
        {46, 41, 45},
        {29, 42, 46},
        {47, 49, 50},
        {48, 34, 49},
        {43, 47, 44},
        {28, 48, 43},
        {51, 53, 54},
        {52, 38, 53},
        {49, 51, 50},
        {34, 52, 49},
        {55, 46, 45},
        {56, 29, 46},
        {53, 55, 54},
        {38, 56, 53},
        {57, 59, 60},
        {58, 62, 59},
        {63, 58, 57},
        {64, 61, 58},
        {67, 63, 66},
        {68, 64, 67},
        {59, 66, 60},
        {62, 67, 59},
        {69, 71, 72},
        {57, 71, 70},
        {34, 70, 69},
        {73, 57, 70},
        {75, 34, 74},
        {66, 73, 75},
        {71, 74, 72},
        {71, 66, 75},
        {76, 78, 79},
        {80, 78, 77},
        {82, 77, 76},
        {84, 77, 83},
        {86, 82, 85},
        {86, 84, 83},
        {78, 85, 79},
        {78, 87, 86},
        {89, 91, 88},
        {89, 79, 90},
        {93, 88, 92},
        {93, 76, 89},
        {94, 93, 92},
        {85, 93, 95},
        {91, 95, 94},
        {79, 95, 90},
        {96, 98, 99},
        {97, 100, 98},
        {102, 96, 101},
        {102, 100, 97},
        {103, 105, 106},
        {104, 100, 105},
        {98, 103, 99},
        {98, 100, 104},
        {107, 109, 110},
        {108, 100, 109},
        {105, 107, 106},
        {105, 100, 108},
        {111, 102, 101},
        {112, 100, 102},
        {109, 111, 110},
        {109, 100, 112},
        {114, 116, 113},
        {96, 115, 114},
        {117, 114, 113},
        {118, 96, 114},
        {120, 122, 119},
        {103, 121, 120},
        {116, 120, 119},
        {115, 103, 120},
        {124, 126, 123},
        {107, 125, 124},
        {122, 124, 123},
        {121, 107, 124},
        {128, 117, 127},
        {111, 118, 128},
        {126, 128, 127},
        {125, 111, 128},
        {129, 54, 55},
        {129, 131, 130},
        {45, 129, 55},
        {132, 131, 129},
        {133, 50, 51},
        {133, 131, 134},
        {54, 133, 51},
        {130, 131, 133},
        {135, 44, 47},
        {135, 131, 136},
        {50, 135, 47},
        {134, 131, 135},
        {137, 45, 41},
        {137, 131, 132},
        {44, 137, 41},
        {136, 131, 137},
        {2, 3, 4},
        {5, 6, 3},
        {7, 8, 2},
        {8, 9, 5},
        {11, 12, 13},
        {14, 15, 12},
        {4, 3, 11},
        {3, 6, 14},
        {17, 18, 19},
        {20, 21, 18},
        {13, 12, 17},
        {12, 15, 20},
        {23, 8, 7},
        {24, 9, 8},
        {19, 18, 23},
        {18, 21, 24},
        {26, 27, 28},
        {1, 4, 27},
        {29, 30, 26},
        {30, 7, 1},
        {32, 33, 34},
        {10, 13, 33},
        {28, 27, 32},
        {27, 4, 10},
        {36, 37, 38},
        {16, 19, 37},
        {34, 33, 36},
        {33, 13, 16},
        {40, 30, 29},
        {22, 7, 30},
        {38, 37, 40},
        {37, 19, 22},
        {41, 42, 43},
        {42, 25, 28},
        {46, 42, 41},
        {29, 25, 42},
        {47, 48, 49},
        {48, 31, 34},
        {43, 48, 47},
        {28, 31, 48},
        {51, 52, 53},
        {52, 35, 38},
        {49, 52, 51},
        {34, 35, 52},
        {55, 56, 46},
        {56, 39, 29},
        {53, 56, 55},
        {38, 39, 56},
        {57, 58, 59},
        {58, 61, 62},
        {63, 64, 58},
        {64, 65, 61},
        {67, 64, 63},
        {68, 65, 64},
        {59, 67, 66},
        {62, 68, 67},
        {69, 70, 71},
        {57, 60, 71},
        {34, 73, 70},
        {73, 63, 57},
        {75, 73, 34},
        {66, 63, 73},
        {71, 75, 74},
        {71, 60, 66},
        {76, 77, 78},
        {80, 81, 78},
        {82, 83, 77},
        {84, 80, 77},
        {86, 83, 82},
        {86, 87, 84},
        {78, 86, 85},
        {78, 81, 87},
        {89, 90, 91},
        {89, 76, 79},
        {93, 89, 88},
        {93, 82, 76},
        {94, 95, 93},
        {85, 82, 93},
        {91, 90, 95},
        {79, 85, 95},
        {96, 97, 98},
        {102, 97, 96},
        {103, 104, 105},
        {98, 104, 103},
        {107, 108, 109},
        {105, 108, 107},
        {111, 112, 102},
        {109, 112, 111},
        {114, 115, 116},
        {96, 99, 115},
        {117, 118, 114},
        {118, 101, 96},
        {120, 121, 122},
        {103, 106, 121},
        {116, 115, 120},
        {115, 99, 103},
        {124, 125, 126},
        {107, 110, 125},
        {122, 121, 124},
        {121, 106, 107},
        {128, 118, 117},
        {111, 101, 118},
        {126, 125, 128},
        {125, 110, 111},
        {129, 130, 54},
        {45, 132, 129},
        {133, 134, 50},
        {54, 130, 133},
        {135, 136, 44},
        {50, 134, 135},
        {137, 132, 45},
        {44, 136, 137},

    }
}

obj_donut = {
    --[[
    octohedron
    
       1            z       
      /\\           |         
     / | \       y \|__ x        
  5 /___\_\ 3                
    \   /4/            
     \ | /                
      \// ^ behind: 2      
       6
    

    verts = {
        v(0,0,1),
        v(0,1,0),
        v(1,0,0),
        v(0,-1,0),
        v(-1,0,0),
        v(0,0,-1),
    
        v(0,0,0),
        v(1,0,0),
        v(0,1,0),
        v(0,0,1),
    },
    
    faces = {
        --clockwise
        {1,3,4},
        {1,4,5},
        {1,5,2},
        {1,2,3},
        
        {4,3,6},
        {5,4,6},
        {5,6,2},
        {3,2,6},
    },]]

    faces_sorted = {},
    

   verts = {
v(1.190000,0.000000,0.000000),
v(1.084558,0.254558,0.000000),
v(0.830000,0.360000,0.000000),
v(0.575442,0.254558,0.000000),
v(0.470000,0.000000,0.000000),
v(0.575442,-0.254558,0.000000),
v(0.830000,-0.360000,0.000000),
v(1.084558,-0.254558,0.000000),
v(0.841457,0.000000,-0.841457),
v(0.766899,0.254558,-0.766899),
v(0.586899,0.360000,-0.586899),
v(0.406899,0.254558,-0.406899),
v(0.332340,0.000000,-0.332340),
v(0.406899,-0.254558,-0.406899),
v(0.586899,-0.360000,-0.586899),
v(0.766899,-0.254558,-0.766899),
v(0.000000,0.000000,-1.190000),
v(0.000000,0.254558,-1.084558),
v(0.000000,0.360000,-0.830000),
v(0.000000,0.254558,-0.575442),
v(0.000000,0.000000,-0.470000),
v(0.000000,-0.254558,-0.575442),
v(0.000000,-0.360000,-0.830000),
v(0.000000,-0.254558,-1.084558),
v(-0.841457,0.000000,-0.841457),
v(-0.766899,0.254558,-0.766898),
v(-0.586899,0.360000,-0.586898),
v(-0.406899,0.254558,-0.406898),
v(-0.332340,0.000000,-0.332340),
v(-0.406899,-0.254558,-0.406898),
v(-0.586899,-0.360000,-0.586898),
v(-0.766899,-0.254558,-0.766898),
v(-1.190000,0.000000,-0.000000),
v(-1.084558,0.254558,-0.000000),
v(-0.830000,0.360000,-0.000000),
v(-0.575442,0.254558,-0.000000),
v(-0.470000,0.000000,-0.000000),
v(-0.575442,-0.254558,-0.000000),
v(-0.830000,-0.360000,-0.000000),
v(-1.084558,-0.254558,-0.000000),
v(-0.841457,0.000000,0.841457),
v(-0.766899,0.254558,0.766898),
v(-0.586899,0.360000,0.586898),
v(-0.406899,0.254558,0.406898),
v(-0.332340,0.000000,0.332340),
v(-0.406899,-0.254558,0.406898),
v(-0.586899,-0.360000,0.586898),
v(-0.766899,-0.254558,0.766898),
v(0.000000,0.000000,1.190000),
v(0.000000,0.254558,1.084558),
v(0.000000,0.360000,0.830000),
v(0.000000,0.254558,0.575442),
v(0.000000,0.000000,0.470000),
v(0.000000,-0.254558,0.575442),
v(0.000000,-0.360000,0.830000),
v(0.000000,-0.254558,1.084558),
v(0.841457,0.000000,0.841458),
v(0.766898,0.254558,0.766899),
v(0.586898,0.360000,0.586899),
v(0.406898,0.254558,0.406899),
v(0.332340,0.000000,0.332340),
v(0.406898,-0.254558,0.406899),
v(0.586898,-0.360000,0.586899),
v(0.766898,-0.254558,0.766899),
},

    faces = {
{1,10,2},
{10,3,2},
{11,4,3},
{12,5,4},
{13,6,5},
{14,7,6},
{7,16,8},
{16,1,8},
{9,18,10},
{18,11,10},
{11,20,12},
{20,13,12},
{21,14,13},
{22,15,14},
{23,16,15},
{16,17,9},
{25,18,17},
{26,19,18},
{19,28,20},
{28,21,20},
{29,22,21},
{30,23,22},
{23,32,24},
{24,25,17},
{33,26,25},
{34,27,26},
{27,36,28},
{36,29,28},
{37,30,29},
{38,31,30},
{39,32,31},
{32,33,25},
{33,42,34},
{42,35,34},
{43,36,35},
{36,45,37},
{45,38,37},
{38,47,39},
{39,48,40},
{48,33,40},
{41,50,42},
{50,43,42},
{51,44,43},
{52,45,44},
{53,46,45},
{46,55,47},
{55,48,47},
{56,41,48},
{57,50,49},
{58,51,50},
{59,52,51},
{52,61,53},
{61,54,53},
{62,55,54},
{63,56,55},
{64,49,56},
{1,58,57},
{58,3,59},
{3,60,59},
{4,61,60},
{5,62,61},
{62,7,63},
{7,64,63},
{64,1,57},
{1,9,10},
{10,11,3},
{11,12,4},
{12,13,5},
{13,14,6},
{14,15,7},
{7,15,16},
{16,9,1},
{9,17,18},
{18,19,11},
{11,19,20},
{20,21,13},
{21,22,14},
{22,23,15},
{23,24,16},
{16,24,17},
{25,26,18},
{26,27,19},
{19,27,28},
{28,29,21},
{29,30,22},
{30,31,23},
{23,31,32},
{24,32,25},
{33,34,26},
{34,35,27},
{27,35,36},
{36,37,29},
{37,38,30},
{38,39,31},
{39,40,32},
{32,40,33},
{33,41,42},
{42,43,35},
{43,44,36},
{36,44,45},
{45,46,38},
{38,46,47},
{39,47,48},
{48,41,33},
{41,49,50},
{50,51,43},
{51,52,44},
{52,53,45},
{53,54,46},
{46,54,55},
{55,56,48},
{56,49,41},
{57,58,50},
{58,59,51},
{59,60,52},
{52,60,61},
{61,62,54},
{62,63,55},
{63,64,56},
{64,57,49},
{1,2,58},
{58,2,3},
{3,4,60},
{4,5,61},
{5,6,62},
{62,6,7},
{7,8,64},
{64,8,1},
},

}


function v2(x,y)
    -- 2d vector
    return {x=x, y=y}
end

function vsub(p2, p1)
    return v(p2.x - p1.x, p2.y - p1.y, p2.z - p1.z)
end

function dot(v1, v2)
    return v1.x*v2.x + v1.y*v2.y + v1.z*v2.z
end

function norm(u)
    return sqrt(u.x*u.x + u.y*u.y + u.z*u.z)
end

function vdiv(u, a)
    return v(u.x/a, u.y/a, u.z/a)
end

function normalize(u)
    if norm(u) == 0 then return u end
    return vdiv(u, norm(u))
end

function clamp(x, a, b)
    return min(max(x, a), b)
end


function tri_flat(p1,p2,p3,col)
    -- assuming p1.y == p2.y

    h = p3.y - p1.y 
    w1 = p3.x - p1.x
    w2 = p3.x - p2.x
    dir = 1
    if(h < 0) dir = -1
    for i=0, h, dir do 
        local ax = clamp(p1.x + (w1/h)*i, 0, 127)
        local ay = clamp(i + p1.y,        0, 127)
        local bx = clamp(p2.x + (w2/h)*i, 0, 127)
        local by = clamp(ay             , 0, 127)
        if ax < bx then
            ax = flr(ax) 
            bx = ceil(bx)
        else 
            ax = ceil(ax) 
            bx = flr(bx)
        end
        rectfill(ax, ay, bx, by, col)
    end
end

function tri(p1,p2,p3,col)
    --sorting the points
    if (p1.y > p2.y) p1,p2 = p2,p1
    if (p2.y > p3.y) p2,p3 = p3,p2
    if (p1.y > p2.y) p1,p2 = p2,p1

    -- calculate midpoint
    slope = (p3.x-p1.x)/(p3.y-p1.y)
    p4 = v2(p1.x + slope*(p2.y-p1.y), p2.y)

    tri_flat(p2,p4,p1,col)
    tri_flat(p2,p4,p3,col)
end

function rotx(object, angle)
    local verts = object.verts
    cosang = cos(angle)
    sinang = sin(angle)
    for i=1, #verts do
        y = verts[i].y
        z = verts[i].z
        verts[i].y = y*cosang - z*sinang
        verts[i].z = z*cosang + y*sinang
    end
end

function roty(object, angle)
    local verts = object.verts
    cosang = cos(angle)
    sinang = sin(angle)
    for i=1, #verts do
        x = verts[i].x
        z = verts[i].z
        verts[i].x = x*cosang - z*sinang
        verts[i].z = z*cosang + x*sinang
    end
end

function rotz(object, angle)
    local verts = object.verts
    cosang = cos(angle)
    sinang = sin(angle)
    for i=1, #verts do
        x = verts[i].x
        y = verts[i].y
        verts[i].x = x*cosang - y*sinang
        verts[i].y = y*cosang + x*sinang
    end
end

function scale(object, a)
    for i=1, #object.verts do
        obj_teapot.verts[i].x *= 0.5
        obj_teapot.verts[i].y *= 0.5
        obj_teapot.verts[i].z *= 0.5
    end
end
function translate_x(object, a)
    for i=1, #object.verts do
        obj_teapot.verts[i].x += a
    end
end
function translate_y(object, a)
    for i=1, #object.verts do
        obj_teapot.verts[i].y += a
    end
end
function translate_z(object, a)
    for i=1, #object.verts do
        obj_teapot.verts[i].z += a
    end
end

-- function sortfaces()
--     f = obj.faces
--     fs = obj.faces_sorted
--     for i=1, #obj.faces-1 do
--         i_min = i
--         for j=i+1, #obj.faces do
--             if obj.verts[ f[ fs[j] ][1] ].z > obj.verts[ f[ fs[i_min] ][1] ].z then 
--                 i_min = j
--             end
--         end
--         fs[i], fs[i_min] = fs[i_min], fs[i]
--     end
-- end

-- 338% CPU before optimisation
-- function lessthan(a, b)
--     -- Average of 3 faces
--     local f = function(face, i) 
--         return obj.verts[obj.faces[face][i]].z
--     end 
--     local sa = f(a,1) + f(a,2) + f(a,3)
--     local sb = f(b,1) + f(b,2) + f(b,3)
--     return sa > sb
-- end
function lessthan(a, b)
    -- Average of 3 faces
    local f = function(face, i) 
        return obj.verts[obj.faces[face][i]].z
    end 
    -- local sa = f(a,1) + f(a,2) + f(a,3)
    -- local sb = f(b,1) + f(b,2) + f(b,3)
    local sa = f(a,1) + f(a,2) 
    local sb = f(b,1) + f(b,2)
    return sa > sb
end

function sortfaces(ra)
    -- before optimisation: selection sort, 321% cpu 
    -- after optimization: 119% CPU with face sorting vs 56% without (+63% impact)
    -- adapted from https://dada.perl.it/shootout/heapsort.lua.html
    local n = #ra
    local j, i, rra
    local l = flr(n/2) + 1
    local ir = n
    while true do
        if l > 1 then
            l = l - 1
            rra = ra[l]
        else
            rra = ra[ir]
            ra[ir] = ra[1]
            ir = ir - 1
            if (ir == 1) then
                ra[1] = rra
                return
            end
        end
        i = l
        j = l * 2
        while j <= ir do
            if (j < ir) and lessthan(ra[j], ra[j+1]) then
                j = j + 1
            end
            if lessthan(rra, ra[j]) then
                ra[i] = ra[j]
                i = j
                j = j + i
            else
                j = ir + 1
            end
        end
        ra[i] = rra
    end
end


--//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function _init()
    stars = {}
    discocolors = false
    
    fov = 50
    offsetx = 64
    offsety = 64
    offsetz = 2.3
    
    lightang = 0
    lightvec = v(1, 0, -1)
    
    camvec = v(0,0,-1)
    poke(0x5F2D, 1)
    
    showtuto= true
    
    obj_n = 1
    objects = {obj_donut, obj_teapot}
    obj_labels = {"donut", "teapot"}
    obj = objects[obj_n]

    for i=1, #obj.faces do
        add(obj.faces_sorted, i)
    end

    for i=0,50 do
        add(stars, {x=rnd(128), y=rnd(128), spd=rnd(5)+1})
    end
    
    scale(obj_teapot, 0.5)
    translate_y(obj_teapot, -0.5)
    rotx(obj_teapot, 0.5)
end

function _update()
    if(btn(0)) roty(obj, 0.01)
    if(btn(1)) roty(obj, -0.01)

    if(btn(2)) rotx(obj, 0.01)
    if(btn(3)) rotx(obj, -0.01)
    
    if(btn(4)) rotz(obj, -0.01)
    if(btn(5)) rotz(obj, 0.01)

    if(btn(0,1)) fov += 1
    if(btn(1,1)) fov -= 1

    if(btn(2,1)) offsetz += 0.02
    if(btn(3,1)) offsetz -= 0.02
    
    -- if(btnp(🅾️,1)) lightvec = normalize(v(rnd(10)-5, rnd(10)-5, rnd(10)-5))
    if(btnp(🅾️,1)) showtuto = not showtuto

    for i in all(stars) do
        i.x -= i.spd
        if i.x < 0 then
            i.x = 127 + rnd(20)
            i.y = rnd(128)
            spd = rnd(3) + 1
        end
    end

    menuitem(1, (discocolors and "white colors" or "disco colors"), function() 
        discocolors = not discocolors 
    end)
    menuitem(2, "obj:"..obj_labels[obj_n], function()
        obj_n += 1
        if(obj_n > #objects) obj_n = 1
        obj = objects[obj_n]
        obj.faces_sorted = {}
    end)

    lightang = (lightang + 0.01) % 1

    local mx = (stat(32)-64)/64
    local my = (stat(33)-64)/64

    lightvec = normalize(v(mx, my, -1))
end


function _draw()
    cls()
    
    for i in all(stars) do
        pset(i.x, i.y, dark_gray)
    end

    
    if(showtuto) print([[
⬅️➡️ rotate y
⬆️⬇️ rotate x
c/x  rotate z
s/f  change fov (]]..tostr(fov)..[[)
e/d  move z (]]..tostr(offsetz)..[[)
tab  toggle help
p    more options
    ]], 0, 0, 5)

    k = 1
    -- with face sorting: 119% CPU vs 56% without (+63% impact)
    -- only consider visibles faces : 136%CPU vs 72% (!!!)
    obj.faces_sorted = {}
    local normals = {}
    for i=1, #obj.faces do 
        ve = obj.verts
        local face = obj.faces[i]

        -- calculating a normal vector
        local p1, p2, p3 = ve[face[1] ], ve[face[2] ], ve[face[3] ]
        local a = vsub(p2, p1)
        local b = vsub(p3, p1)
        
        local n = v( 
            a.y * b.z - a.z * b.y,
            a.z * b.x - a.x * b.z,
            a.x * b.y - a.y * b.x
        ) 
        n = normalize(n)
        local d = dot(n, camvec)

        normals[i] = n 
        if d >= 0 then
            add(obj.faces_sorted, i)
        end
    end

    sortfaces(obj.faces_sorted) 

    for i=1, #obj.faces_sorted do
        local face_id = obj.faces_sorted[i]
        local n = normals[face_id]
        local face = obj.faces[face_id]
 
        --taking the dot product of the normal & camera vector
        
        d_shade = dot(n, lightvec)
        
        --ajust color depending on dot product
        local col
        if discocolors then 
            col = face_id%15+1
        else
            -- local shade = {dark_blue, dark_purple, dark_gray, indigo, light_gray, peach, white}
            local shades = {0, 7, 6, 134, 13, 5, 133, 130, 128}
            local shades = {[0]=0, 128, 130, 133, 5, 13, 134, 6, 7}
            for i=0, #shades do pal(i, shades[i], 1) end
            local j = clamp(flr(d_shade * 1.2 * #shades), 1, #shades)
            col = j
        end

        local p1, p2, p3 = ve[face[1] ], ve[face[2] ], ve[face[3] ]
        local a = vsub(p2, p1)
        local b = vsub(p3, p1)

        local persp = 1.2
        local z1 = p1.z + offsetz
        local z2 = p2.z + offsetz
        local z3 = p3.z + offsetz
        local ax = (p1.x/z1)*fov + offsetx
        local ay = (p1.y/z1)*fov + offsety
        local bx = (p2.x/z2)*fov + offsetx
        local by = (p2.y/z2)*fov + offsety
        local cx = (p3.x/z3)*fov + offsetx
        local cy = (p3.y/z3)*fov + offsety

        -- TODO: fillp dither 
        -- local dither_levels = {}
        tri(
            v(ax, ay),
            v(bx, by),
            v(cx, cy),
        col)--pal[min(k, 4)])
        
        k += 1
    end

    k = 1
    --[[for i in all(obj.edges) do
        ve = obj.verts
        line(
            ve[i[1] ].x*fov + offsetx + 30, 
            ve[i[1] ].y*fov + offsety + 30, 
            ve[i[2] ].x*fov + offsetx + 30, 
            ve[i[2] ].y*fov + offsety + 30, 
            pal[min(k, 4)])
        k += 1
    end]]

    local mx = stat(32)
    local my = stat(33)
    circfill(mx, my, 2, 8)
end

__gfx__
00000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__label__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000d0000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d00000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d00000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d00
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00d00000000000000000000000000000000000000000000000000066600000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000ggg66667000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000006gggg6666666777000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000006ggggg6666666666667770000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000ggggggg666666666667777777770000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000006ggggg66666666666667777777777777700000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000066666666666666666667777777777777777777700000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000gmmmm6666666666667777777777777777777777777700000000000000000000000000000000000000000000000000000
0000000000000000000000000000000ggmmmmmmmm666667777777777777777777777777777777000000000000000000000000000000000000000000000000000
000000000000000000000000000000ggmmmmmmmmmmmm777777777777777777777777777777777700000000000000000000000000000000000000000000000000
00000000000000000000000000000gggmmmmmmmmmmmm777777777777777777777777777777777670000000000000000000000000000000000000000000000000
0000000000000000000000000000dgggmmmmmmmmmmmm777777777777777777777777777777777667000000000000000000000000000000000000000000000000
0000000000000000000000000000ggggmmmmmmmmmmmm777777777777777777l77777777777776666700000000000000000000000000000000000000000000000
0000000000000000000000000000gggmmmmmmmmmmmmm7777777777777777ddl77777777777776666770000000000000000000000000000000000000000000000
0000000000000000000000000000gggmmmmmmmmmmmm777777777777777dddlllii77777777766666677000000000000000000000000000000000000000000000
000000000000000000000000000ggggmmmmmmmmmmmm777777777777ddddddlllliiii77777766666667700000000000000000000000000000000000000000000
000000000000000000000000000gggmmmmmmmmmmmmm7777777777ddddddddllllliiiiiiiig66666666770000000000000000000000000000000000000000000
000000000000000000000000000gggmmmmmmmmmmmmm777777777dddddddddllllliiiiiii6666666666677000000000000000000000000000000000000000000
000000000000000000000000000gggmmmmmmmmmmmmm777777777dddddddddlllllliiiiiig666666666667700000000000000000000000000000000000000000
00000000000000000000000000ggggmmmmmmmmmmmmm777777777ddddddddlllllllliiiiggg66666666666770000000000000000000000000000000000000000
00000000000000000000000000gggmmmmmmmmmmmmm7777777777ddddddgggglllllliiiggggg6666666666677000000000000000000000000000000000000000
00000000000000000000000000gggmmmmmmmmmmmmm777777777ddddddgggggggglllliigggggg666666666667700000000000000000000000000000000000000
0000000000000000000000000ggggmmmmmmmmmmmmm777777777dddd000gggggggggiiigggggggg66666666666770000000000d00000000000000000000000000
0000000000000000000000000ggggmmmmmmmmmmmmm777777777dd000000000ggggggggggggggggg66666666mmm70000000000000000000000000000000000000
0000000000000000000000000gggmmmmmmmmmmmmmm77777777700000000000000ggggggggggggggg6666mmmmmm77700000000000000000000000000000000000
000000000000000000000000ggggmmmmmmmmmmmmmm777777777000000000000000gggggggggggggggmmmmmmmmmm7700000000000000000000000000000000000
000000000000000000000000ggggmmmmmmmmmmmmm77777777770000000000000000ggggggggggggggggmmmmmmmm7700000000000000000000000000000000000
000000000000000000000000gggmmmmmmmmmmmmmm777777777700000000000000000gggggggggggggggmmmmmmmm7700000000000000000000000000000000000
0000000000000000d000000ggggmmmmmmmmmmmmmm7777777777000000000000000000gggggggggggggggmmmmmmm7770000000000000000000000000000000000
00000000000000000000000ggggmmmmmmmmmmmm667777777777d000000000000000000ggggggggggggggmmmmmmmm770000000000000000000000000000000000
00000000000000000000000ggggmmmmmmmm666666677777777700000000000000000000gggggggggggggmmmmmmmm770000000000000000000000000000000000
0000000000d000000000000gggmmmmmm6666666666777777777700000000000000000000ggggggggggggmmmmmmmm770000000000000000000000000000000000
0000000000000000000000ggggmmm6666666666666677777777770000000000000000000ggggggggggggmmmmmmmmm77000000000000000d00000000000000000
0000000000000000000000gggg66666666666666666677777777770000000000000000000ggggggggggggmmmmmmmm77000000000000000000000000000000000
0000000000000000000000gggg66666666666666666667777777777000000000000000000gggggggggggmmmmmmmmm77000000000000000000000000000000000
000000000000000000000gggggg6666666666666666666777777777700000000000000000gggggggggggmmmmmmmmm77700000000000000000000000000000000
000000000000000000000ggggggg666666666666666666677777777700000000000000000gggggggggggmmmmmmmmmm7700000000000000000000000000000000
000000000000000000000gggggggg66666666666666666667777777770000000000000000ggggggggggggmmmmmmmmm7700000000000000000000000000000000
00000000000000000000gggggggggg66666666666666666677777777770000000000000000gggggggggg6666mmmmmm7700000000000000000000000000000000
00d00000000000000000ggggggggggg6666666666666666667777777777000000000000000ggggggggg66666666mmm7770000000000000000000000000000000
000000000000000000000gggggggggg6666666666666666666777777777700000000000000ggggggggg666666666777770000000000000000000000000000000
000000000000000000000ggggggggggg666666666666666666677777777770000000000000gggggggg6666666666777770000000000000000000000000000000
00000d0000000000000000ggggggggggg6666666666666666666777777777700000000000gggggggg66666666667777777000000000000000000000000000000
00000000000000000000000ggggggggggg66666666666666666667777777770000000000gggggggg666666666677777777000000000000000000000000d00000
00000000d000000000000000ggggggggggg666666666666666666777777777770000000gggggggg6666666666677777777000000000000000000000000000000
0000000000000000000000000gggggggggg666666666666666666677777777777777777ggggggg66666666666777777777700000000000000000000000000000
0000000000000000000000000ggggggggggg66666666666666666667777777777777777777777766666666667777777777000000000000000000000000000000
0000000000000000000000d000ggggggggggg6666666666666666666777777777777777777777776666666667777777770000000000000000000000000000000
000000000000000000000000000ggggggggggg666666666666666666677777777777777777777777666666677777777770000000000000000000000000000000
0000000000000000000000000000ggggggggggg66666666666666666667777777777777777777777666666777777777700000000000000000000000000000000
00000000000000000000000000000ggggggggggg6666666666666666666777777777777777777777766666777777777700000000000000000000000000000000
00000000000000000000000000000ggggggggggg6666666666666666666777777777777777777777776667777777777000000000000000000000000000000000
000000000000000000000000000000ggggggggggg666666666666666666677777777777777777777777677777777777000000000000000000000000000000000
0000000000000000000000000000000ggggggggggg66666666666666666677777777777777777777777777777777770000000000000000000000000000000000
00000000000000000000000000000000ggggggggggg6666666666666666777777777777777777777777777777777700000000000000000000000000000000000
000000000000000000000000000000000ggggggggggg666666666666666777777777777777777777777777777777700000000000000000000000000000000000
000000000000000000000000000000000ggggggggggg666666666666667777777777777777777777777777777777000000000000000000000000000000000000
0000000000000d00000000000000000000ggggggggggg66666666666667777777777777777777777777777777777000000000000000000000000000000000000
00000000000000000000000000000000000ggggggggggg6666666666677777777777777777777777777777777770000000000000000000000000000000000000
000000000000000000000000000000000000ggggggggggg666666666677777777777777777777777777777777770000000000000000000000000000000000000
0000000000000000000000000000000000000ggggggggggg66666666777777777777777777777777777777777700000000000000000000000000000000000000
0000000000000000000000000000000000000gggggggggggg6666666777777777777777777777777777777777700000000000000000000000000000000000000
00000000000000d00000000000000000000000ggggggggggg6666667777777777777777777777777777777777000000000000000000000000000000000000000
000000000000000000000000000000000000000ggggggggggg66666777777777777777777777777777777777d000000000000000000000000000000000000000
0000000000000000000000000000000000000000ggggggggggg66677777777777777777777777777777777770000000000000000000000000000000000000000
000000000d0000000000000000000000000000000ggggggggggg66777777777777777777777777777777777d0000000000000000000000000000000000000000
00000000000000000000000000000000000000000ggggggggggggiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii00000000000000000000000000000000000000000
000000000000000000000000000000000000000000ggggggggggiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000ggggggggiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii0000000000000000000000000000000000000000000
00000000000000000000000000d00000000000000000ggggggiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii000000000000000000000000000000d000000000000
0000000000000000000000d0000000000000000000000ggggiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii00000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000gggiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000d00000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000d00000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000d00000000000000000000000000000000000000000d0000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000d00000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

